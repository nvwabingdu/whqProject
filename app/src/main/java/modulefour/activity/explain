
                                     Activity生命周期



（1）onCreate:create表示创建，这是Activity生命周期的第一个方法，也是我们在android开发中接触的最多的生命周期方法。它本身的作用是进行Activity的一些初始化工作，比如使用setContentView加载布局，对一些控件和变量进行初始化等。但也有很多人将很多与初始化无关的代码放在这，其实这是不规范的。此时Activity还在后台，不可见。所以动画不应该在这里初始化，因为看不到……

（2）onStart:start表示启动，这是Activity生命周期的第二个方法。此时Activity已经可见了，但是还没出现在前台，我们还看不到，无法与Activity交互。其实将Activity的初始化工作放在这也没有什么问题，放在onCreate中是由于官方推荐的以及我们开发的习惯。
      onRestoreInstanceState();//恢复异常情况下的数据
（3）onResume:resume表示继续、重新开始，这名字和它的职责也相同。此时Activity经过前两个阶段的初始化已经蓄势待发。Activity在这个阶段已经出现在前台并且可见了。这个阶段可以打开独占设备

            onWindowFocusChanged();Activity获得焦点
（4）onPause:pause表示暂停，当Activity要跳到另一个Activity或应用正常退出时都会执行这个方法。此时Activity在前台并可见，我们可以进行一些轻量级的存储数据和去初始化的工作，不能太耗时，因为在跳转Activity时只有当一个Activity执行完了onPause方法后另一个Activity才会启动，而且android中指定如果onPause在500ms即0.5秒内没有执行完毕的话就会强制关闭Activity。从生命周期图中发现可以在这快速重启，但这种情况其实很罕见，比如用户切到下一个Activity的途中按back键快速得切回来。
            onWindowFocusChanged();Activity失去焦点
      onSaveInstanceState();//保存异常情况下的数据
（5）onStop：stop表示停止，此时Activity已经不可见了，但是Activity对象还在内存中，没有被销毁。这个阶段的主要工作也是做一些资源的回收工作。

（6）onDestroy：destroy表示毁灭，这个阶段Activity被销毁，不可见，我们可以将还没释放的资源释放，以及进行一些回收工作。

（7）onRestart：restart表示重新开始，Activity在这时可见，当用户按Home键切换到桌面后又切回来或者从后一个Activity切回前一个Activity就会触发这个方法。这里一般不做什么操作。


2.onCreate和onStart之间有什么区别？

（1）可见与不可见的区别。前者不可见，后者可见。
（2）执行次数的区别。onCreate方法只在Activity创建时执行一次，而onStart方法在Activity的切换以及按Home键返回桌面再切回应用的过程中被多次调用。因此Bundle数据的恢复在onStart中进行比onCreate中执行更合适。
（3）onCreate能做的事onStart其实都能做，但是onstart能做的事onCreate却未必适合做。如前文所说的，setContentView和资源初始化在两者都能做，然而想动画的初始化在onStart中做比较好。

3.onStart方法和onResume方法有什么区别？

（1）是否在前台。onStart方法中Activity可见但不在前台，不可交互，而在onResume中在前台。
（2）职责不同，onStart方法中主要还是进行初始化工作，而onResume方法，根据官方的建议，可以做开启动画和独占设备的操作。

4.onPause方法和onStop方法有什么区别？

（1）是否可见。onPause时Activity可见，onStop时Activity不可见，但Activity对象还在内存中。
（2）在系统内存不足的时候可能不会执行onStop方法，因此程序状态的保存、独占设备和动画的关闭、以及一些数据的保存最好在onPause中进行，但要注意不能太耗时。

5.onStop方法和onDestroy方法有什么区别？

onStop阶段Activity还没有被销毁，对象还在内存中，此时可以通过切换Activity再次回到该Activity，而onDestroy阶段Acivity被销毁



(A)onPause→(B)onCreate→(B)onStart→(B)onResume→(A)onStop
而不是(A)onPause→(A)onStop→(B)onCreate→(B)onStart→(B)onResume
（1）一个Activity或多或少会占有系统资源，而在官方的建议中，onPause方法将会释放掉很多系统资源，为切换Activity提供流畅性的保障，而不需要再等多两个阶段，这样做切换更快。
（2）按照生命周期图的表示，如果用户在切换Activity的过程中再次切回原Activity，是在onPause方法后直接调用onResume方法的，这样比onPause→onStop→onRestart→onStart→onResume要快得多。



//1.关于  onpause-->onSaveInstanceState<--onstop   和   onStart-->onRestoreInstanceState<--onResume  不一定成对出现 出现位置也不一定
//2.（未经你许可销毁时）在系统 1.按下HOME键 2.选择运行其他的程序  3.按下电源按键（关闭屏幕显示）时  4.从activity A中启动一个新的activity 5.屏幕方向切换时，例如从竖屏切换到横屏时。
//3.大多时候不被成对使用。
//4.不同于生命周期  因为不一定被调用。  持久化操作不要用在这里， 应写在onPause()周期。
//5.所以写的时候只用于暂时的一些数据，且最好在onCreat里面也写上。



BACK键：
当我们按BACK键时，我们这个应用程序将结束，这时候我们将先后调用onPause()->onStop()->onDestory()三个方法，

HOME键:
当我们打开应用程序时，比如浏览器，我正在浏览NBA新闻，看到一半时，我突然想听歌，这时候我们会选择按HOME键，
然后去打开音乐应用程序，而当我们按HOME的时候，Activity先后执行了onPause()->onStop()这两个方法，这时候应用程序并没有销毁
而当我们再次启动ActivityDemo应用程序时，则先后分别执行了onRestart()->onStart()->onResume()三个方
此时的数据并不能保存  需要写在onpause方法里面 或者写在onsaveinstance里面

横竖屏：
有没有方法让在横竖和竖屏切换时，不要重新创建活动呢？？当然是肯定的。
其实很简单，只要在Manifest文件中加入configChanges属性即可。也就是当检测到confiChanges指定
的属性发生改变时，也不会再去重新创建活动了。
android:screenOrientation="sensor"//自动切换横竖屏   portrait只能竖屏   landscape横屏
android:configChanges="orientation|screenSize"//设置之后不会重新创建活动
android:configChanges="keyboardHidden|orientation|screenSize"最好使用三个都使用

@Override//可以把横竖屏的做的操作放在这里面
public void onConfigurationChanged(Configuration newConfig) {
       super.onConfigurationChanged(newConfig);
       Log.e(Tag,"onConfigurationChanged");
     }


顺便一提
configchanges属性：  <uses-permission android:name="android.permission.CHANGE_CONFIGURATION" />？？？
     mcc：移动设备国家代码（Mobile Country Code，MCC）更换的Sim卡改变了MCC.
     mnc：移动设备网络代码（Mobile Network Code，MNC）更换的Sim卡改变了MNC.
     通过某个国家的国家代码和网络代码共同确定当前手机网络运营商；因为同一个网络在不同国家可能运营商不同。
     locale：用户选择一种新的语言
     touchscreen：更换手机屏幕.
     keyboard：键盘类型发生改变，如更换外置键盘.
     keyboardHidden：手机键盘是否可显示被设置，如已使用外置键盘.
     navigation：导航系统发生改变.
     screenLayout：手机屏幕布局发生改变，如新的屏保被激活.
     fontScale：手机字体发生改变.
     uiMode：2.2系统之后才出现，如用户把手机放桌子上、车子上或默认模式被启用.
     orientation：手机屏幕切换，如横竖屏；如果运行sdk在13及以上，也需要加上screenSize.
     screenSize：可用屏幕大小发生改变；sdk在12及以下不需要注意.
     smallestScreenSize：手机屏幕发生改变，且不用顾及转屏的问题；如放到一个投影仪查看手机，API13以上添加的属性.
     layoutDirection：手机屏幕左右或上下互换，API17以上添加的属性.


screenOrientation属性：
     "unspecified"	默认值，由系统来选择方向。它的使用策略，以及由于选择时特定的上下文环境，可能会因为设备的差异而不同。
     "user"	使用用户当前首选的方向。
     "behind"	使用Activity堆栈中与该Activity之下的那个Activity的相同的方向。
     "landscape"	横向显示（宽度比高度要大）
     "portrait"	纵向显示（高度比宽度要大）
     "reverseLandscape"	与正常的横向方向相反显示，在API Level 9中被引入。
     "reversePortrait"	与正常的纵向方向相反显示，在API Level 9中被引入。
     "sensorLandscape"	横向显示，但是基于设备传感器，既可以是按正常方向显示，也可以反向显示，在API Level 9中被引入。
     "sensorPortrait"	纵向显示，但是基于设备传感器，既可以是按正常方向显示，也可以反向显示，在API Level 9中被引入。
     "sensor"	显示的方向是由设备的方向传感器来决定的。显示方向依赖与用户怎样持有设备；当用户旋转设备时，显示的方向会改变。但是，默认情况下，有些设备不会在所有的四个方向上都旋转，因此要允许在所有的四个方向上都能旋转，就要使用fullSensor属性值。
     "fullSensor"	显示的方向（4个方向）是由设备的方向传感器来决定的，除了它允许屏幕有4个显示方向之外，其他与设置为“sensor”时情况类似，不管什么样的设备，通常都会这么做。例如，某些设备通常不使用纵向倒转或横向反转，但是使用这个设置，还是会发生这样的反转。这个值在API Level 9中引入。
     "nosensor"	屏幕的显示方向不会参照物理方向传感器。传感器会被忽略，所以显示不会因用户移动设备而旋转。除了这个差别之外，系统会使用与“unspecified”设置相同的策略来旋转屏幕的方向。






                                                  正确使用方法
（1）onCreate()方法
活动第一次创建时被调用。

（2）onStart()
活动由不可见变为可见的时候调用


（3）onResume()
当活动准备开始与用户交互时会触发该方法，一般只会在需要执行以下的操作时才重写该事件：
l 开始动画
l 开始监听GPS更新
l 显示一些相关的提示和对话框
l 注册广播监听？？？？？


（4）onPause()
系统准备去启动或者恢复另外一个活动的时候调用。或者当活动被切换到后台时将触发该方法，一般我们需要在该事件做如下的事情：
l 保存用户未提交的数据
l 关闭或清除引用的资源
l 注销广播
l 如果存在正在显示的提示或者对话框，则必须利用.Dismiss()进行清除。
***需要极其注意的是：在onPause中执行的操作不能太耗时！


（5）onStop()
当该活动完全不可见的时候被调用。一般会由以下原因触发：
l 当一个新的活动打开，并覆盖该活动时
l 一个已存在的活动切换到前台时
l 活动被销毁时
OnStop不是每次都会被执行，如果内存低下时，系统将不会执行该事件，而是直接关闭该应用，所以大家在OnPause事件中就要保存好所以的参数等等。而不能依赖该事件。


(6)onDestroy()
活动销毁之前被调用

（7）onRestart()
当活动由停止状态变为运行状态时被调用。即当用户通过Home按钮将该用户切换到后台，并在之后又打开该应用则会触发该事件。一般也很少重写该方法。





                                        启动模式

使用方式
android:launchMode="standard"

二、Activity的启动模式
standard：标准模式，系统默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。
singleTop：栈顶复用模式，在这种模式下，如果Activity已经于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以去除前请求的信息。需要注意的是，这个Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已经存在但不是位于栈顶，那么新Activity，仍然会重新重建。
singleTask：栈内复用模式。这是一种单实例模式，在这中模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，系统也会回调其onNewIntent。
singleInstance：


白话理解
standard：一个一个放 管他有没有
singleTop：如果刚好在栈顶就拿来用  在下面就还是new一个
singleTask：如果有就拿来用
singleInstance：重新创建一个只有他自己的栈


